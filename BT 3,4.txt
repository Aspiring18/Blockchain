Bank Account:

pragma solidity >= 0.8.18;
// SPDX-License-Identifier: UNLICENSED

// Write  a  smart  contract  on  a  test  network,  for  Bank  account  of  a  customer  for
  // following operations: Deposit money | Withdraw Money | Show balance
contract Bank{
    mapping(address => uint) public user_account;
    mapping(address => bool) public user_exist;

    function create_account() public payable returns(string memory){
        require(user_exist[msg.sender] == false, "Account Already created!");
        user_account[msg.sender] = msg.value;
        user_exist[msg.sender] = true;
        return "Account created";
    }

    function deposit(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender] == true, "Account not created!");
        require(amount > 0, "Amount should be greater than 0");
        user_account[msg.sender] += amount;
        return "Amount deposisted sucessfully";
    }

    function withdraw(uint amount) public payable returns(string memory){
        require(user_exist[msg.sender] == true, "Account not created!");
        require(amount > 0, "Amount should be greater than 0");
        require(user_account[msg.sender] >= amount, "Amount is greater than money deposisted");
        user_account[msg.sender] -= amount;
        return "Amount withdrawn sucessfully";    
    }

    function account_balance() public view returns(uint){
        return user_account[msg.sender];
    }
    
    function account_exists() public view returns(bool){
        return user_exist[msg.sender];
    }

}


MarksManagement System: 
// Solidity program to implement 
// the above approach 
// SPDX-License-Identifier: UNLICENSED

pragma solidity >= 0.8.18; 

// Build the Contract 
contract MarksManagmtSys 
{ 
	// Create a structure for 
	// student details 
	struct Student 
	{ 
		int ID; 
		string fName; 
		string lName; 
		int marks; 
	} 

	address owner; 
	int public stdCount = 0; 
	mapping(int => Student) public stdRecords; 

	modifier onlyOwner 
	{ 
		require(owner == msg.sender); 
		_; 
	} 
	constructor() 
	{ 
		owner=msg.sender; 
	} 

	// Create a function to add 
	// the new records 
	function addNewRecords(int _ID, 
						string memory _fName, 
						string memory _lName, 
						int _marks) public onlyOwner 
	{ 
		// Increase the count by 1 
		stdCount = stdCount + 1; 

		// Fetch the student details 
		// with the help of stdCount 
		stdRecords[stdCount] = Student(_ID, _fName, 
									_lName, _marks); 
	} 

	// Create a function to add bonus marks 
	function bonusMarks(int _bonus) public onlyOwner 
	{ 
		stdRecords[stdCount].marks = 
					stdRecords[stdCount].marks + _bonus; 
	} 
} 
